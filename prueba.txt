//* URL base de la API
const BASE_URL = "https://pokeapi.co/api/v2";

//* Pokemones que se van a mostrar en pantalla
let offset = 0;
const limit = 20;

//* Elementos DOM
const cardsContainer = document.getElementById("cardsContainer");
const prevBtn = document.getElementById("prev");
const nextBtn = document.getElementById("next");
const pageNumber = document.getElementById("pageNumber");
const searchInput = document.getElementById("searchInput");
const searchBtn = document.getElementById("searchBtn");

//* Variable para guardar los pokemon mostrados antes de buscar
let lastPokemonList = [];


//* variables para llevar el control de la paginación
let currentPage = 1; // Página actual
let totalPages = 1; // Total de paginas disponibles

//* Mando a llamar la funcion - Cargar la primera página al inicio
fetchPokemonList(offset);

async function fetchPokemonList(offset = 0) {
  cardsContainer.innerHTML = ""; //* DOM
  try {
    const res = await fetch(`https://pokeapi.co/api/v2/pokemon?limit=${limit}&offset=${offset}`);
    const data = await res.json();




    
    const promises = data.results.map((p) =>
      fetch(p.url).then((res) => res.json())
    );
    const pokemonData = await Promise.all(promises);
    // Guardamos la lista actual
    lastPokemonList = pokemonData;

    // Crear cartas de forma asíncrona
    for (const pokemon of pokemonData) {
      await createCard(pokemon);
    }

    updatePageNumber();
  } catch (error) {
    cardsContainer.innerHTML = "<p>Error al cargar Pokémon.</p>";
  }
}

// Modificamos el evento de búsqueda
searchBtn.addEventListener("click", async () => {
  const query = searchInput.value.toLowerCase().trim();

  if (!query) {
    // Si el campo está vacío, mostramos la última lista
    cardsContainer.innerHTML = "";
    for (const pokemon of lastPokemonList) {
      await createCard(pokemon);
    }
    pageNumber.textContent = `Página ${Math.floor(offset / limit) + 1}`;
    return;
  }

  try {
    const res = await fetch(`https://pokeapi.co/api/v2/pokemon/${query}`);
    if (!res.ok) throw new Error();
    const data = await res.json();
    cardsContainer.innerHTML = "";
    await createCard(data);
    pageNumber.textContent = `Resultado`;
  } catch {
    cardsContainer.innerHTML = "<p>Pokémon no encontrado.</p>";
    pageNumber.textContent = `Error`;
  }
});

// Añadimos evento para detectar cuando se borra el texto
searchInput.addEventListener("input", async function () {
  if (this.value === "") {
    // Si el campo está vacío, mostramos la última lista
    cardsContainer.innerHTML = "";
    for (const pokemon of lastPokemonList) {
      await createCard(pokemon);
    }
    pageNumber.textContent = `Página ${Math.floor(offset / limit) + 1}`;
  }
});

// Función para crear la carta del Pokémon con descripción
async function createCard(pokemon) {
  const card = document.createElement("div");
  card.className = "card";

  try {
    // Obtener información adicional de especies para la descripción
    const speciesResponse = await fetch(pokemon.species.url);
    const speciesData = await speciesResponse.json();

    // Obtener la descripción en español (o inglés si no hay en español)
    const description =
      speciesData.flavor_text_entries.find(
        (entry) => entry.language.name === "es"
      ) ||
      speciesData.flavor_text_entries.find(
        (entry) => entry.language.name === "en"
      );

    // Formatear los tipos
    const typeElements = pokemon.types
      .map((t) => `<span class="type-${t.type.name}">${t.type.name}</span>`)
      .join(", ");

    // Limpiar y formatear la descripción
    const cleanDescription =
      description?.flavor_text
        .replace(/\n/g, " ") // Eliminar saltos de línea
        .replace(/\f/g, " ") || // Eliminar caracteres especiales
      "Descripción no disponible";

    card.innerHTML = `
      <div class="card-inner">
        <div class="card-front">
          <img src="${pokemon.sprites.front_default}" alt="${pokemon.name}" />
        </div>
        <div class="card-back">
          <h2>${pokemon.name.toUpperCase()}</h2>
          <p><strong>ID:</strong> ${pokemon.id}</p>
          <p><strong>Tipo:</strong> ${typeElements}</p>
          <p class="pokemon-description">${cleanDescription}</p>
        </div>
      </div>
    `;
  } catch (error) {
    console.error("Error al cargar detalles del Pokémon:", error);
    // Versión de respaldo si falla la carga de datos adicionales
    const typeElements = pokemon.types
      .map((t) => `<span class="type-${t.type.name}">${t.type.name}</span>`)
      .join(", ");

    card.innerHTML = `
      <div class="card-inner">
        <div class="card-front">
          <img src="${pokemon.sprites.front_default}" alt="${pokemon.name}" />
        </div>
        <div class="card-back">
          <h2>${pokemon.name.toUpperCase()}</h2>
          <p><strong>ID:</strong> ${pokemon.id}</p>
          <p><strong>Tipo:</strong> ${typeElements}</p>
          <p class="pokemon-description">Descripción no disponible</p>
        </div>
      </div>
    `;
  }

  cardsContainer.appendChild(card);
}

function updatePageNumber() {
  const page = Math.floor(offset / limit) + 1;
  pageNumber.textContent = `Página ${page}`;
}

prevBtn.addEventListener("click", () => {
  if (offset >= limit) {
    offset -= limit;
    fetchPokemonList(offset);
  }
});

nextBtn.addEventListener("click", () => {
  offset += limit;
  fetchPokemonList(offset);
});
